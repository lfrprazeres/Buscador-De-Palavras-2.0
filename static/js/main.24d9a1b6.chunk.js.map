{"version":3,"sources":["components/Header/style.js","components/Header/index.js","components/MainText/style.js","components/MainText/index.js","components/Field/index.js","pages/App/style.js","pages/App/index.js","pages/Result/style.js","utils/createRegex.js","pages/Result/index.js","router.js","index.js"],"names":["Container","styled","div","Header","props","TextArea","textarea","MainText","text","setText","value","onChange","e","target","placeholder","Field","onChangeWord","similarWords","onChangeSimilarWords","Grid","container","spacing","item","xs","sm","alignItems","FormControlLabel","style","height","control","Checkbox","checked","color","label","Content","SearchText","p","App","history","useHistory","useState","words","setWords","setSimilarWords","Tooltip","title","Button","variant","onClick","trim","push","pathname","state","alert","Response","createRegex","keepSimilarWords","RegExp","toLowerCase","normalize","replace","Result","location","useEffect","textWords","split","forEach","searchWord","response","searchWordLength","filter","word","length","matchesFind","regex","textWord","match","matches","type","handleMatchWord","setResponses","previousResponse","phrase","searchPhraseSplitted","phraseLength","phraseWord","phraseIndex","textWordIndex","currentMatch","keepMatching","newRegex","newMatch","handleMatchPhrase","setMaxMatches","previousMatches","initMatchCalc","setTimeout","responses","typeResponse","setTypeResponse","maxMatches","a11yProps","index","id","TabPanel","children","other","role","hidden","aria-labelledby","AppBar","Tabs","event","newValue","Tab","map","key","marginTop","data","datasets","backgroundColor","randomcolor","labels","width","window","innerWidth","innerHeight","options","responsive","maintainAspectRatio","scales","xAxes","ticks","stepSize","Math","ceil","max","legend","display","Routes","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24d9a1b6.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  background-color: #2878b7;\r\n  margin: 63px 0;\r\n  padding: 20px 0;\r\n  h2 {\r\n    color: white;\r\n    font-family: \"Lato\", sans-serif;\r\n    font-size: 50px;\r\n    font-weight: 900;\r\n    margin: 0;\r\n    text-align: center;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Container } from \"./style\";\r\n\r\nexport default function Header(props) {\r\n  return (\r\n    <Container>\r\n      <h2>Buscador de Palavras</h2>\r\n    </Container>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const TextArea = styled.textarea`\r\n  min-height: 455px;\r\n  font-size: 16px;\r\n  min-width: 100%;\r\n  max-width: 100%;\r\n  padding: 20px;\r\n`;\r\n","import React from \"react\";\r\nimport { TextArea } from \"./style\";\r\n\r\nexport default function MainText(props) {\r\n  const { text, setText } = props;\r\n  return (\r\n    <TextArea\r\n      value={text}\r\n      onChange={(e) => setText(e.target.value)}\r\n      placeholder=\"Digite o Texto a ser analisado aqui\"\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Checkbox, FormControlLabel, Grid } from \"@material-ui/core\";\r\nimport { TextArea } from \"../MainText/style\";\r\n\r\nexport default function Field(props) {\r\n  const {\r\n    value,\r\n    onChangeWord,\r\n    similarWords,\r\n    onChangeSimilarWords,\r\n    placeholder,\r\n  } = props;\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} sm={8} container alignItems=\"center\">\r\n        <TextArea\r\n          placeholder={placeholder}\r\n          value={value}\r\n          onChange={(e) => onChangeWord(e.target.value)}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6} sm={4} container alignItems=\"center\">\r\n        <FormControlLabel\r\n          style={{ height: 50 }}\r\n          control={\r\n            <Checkbox\r\n              checked={similarWords}\r\n              onChange={onChangeSimilarWords}\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label=\"Considerar palavras semelhantes\"\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled.div`\r\n  margin: 0 auto;\r\n  width: 71%;\r\n`;\r\n\r\nexport const SearchText = styled.p`\r\n  font-size: 21px;\r\n  margin: 7px 0 10px 0;\r\n`;\r\n","import { Button, Grid, Tooltip } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { Field, Header, MainText } from \"../../components\";\nimport { Content, SearchText } from \"./style\";\nimport { useHistory } from \"react-router-dom\";\nimport InfoIcon from \"@material-ui/icons/Info\";\n\nfunction App() {\n  let history = useHistory();\n  const [words, setWords] = useState(\"\");\n  const [similarWords, setSimilarWords] = useState(false);\n  const [text, setText] = useState(\"\");\n\n  return (\n    <>\n      <Header />\n      <Content>\n        <MainText text={text} setText={(text) => setText(text)} />\n        <Grid container alignItems=\"center\" spacing={2}>\n          <Grid item>\n            <SearchText>Digite a palavra ou frase que deseja buscar</SearchText>\n          </Grid>\n          <Grid item>\n            <Tooltip\n              title=\"Faça a pesquisa das suas palavras separadas por enter, frases também\n          são possíveis, porém serão consideradas apenas frases idênticas (ignorando caps e acentos)\"\n            >\n              <InfoIcon />\n            </Tooltip>\n          </Grid>\n        </Grid>\n        <Field\n          value={words}\n          placeholder=\"Digite as palavras ou frases que deseja pesquisar separadas por ENTER, qualquer palavra não separada por enter será considerada uma frase\"\n          onChangeWord={(text) => setWords(text)}\n          onChangeSimilarWords={() => setSimilarWords(!similarWords)}\n          similarWords={similarWords}\n        />\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => {\n                if (text.trim() !== \"\" && words.trim() !== \"\") {\n                  history.push({\n                    pathname: \"/Buscador-De-Palavras-2.0/result\",\n                    state: {\n                      text,\n                      words,\n                      similarWords,\n                    },\n                  });\n                } else {\n                  alert(\"Digite o texto e o que deseja pesquisar nele!\");\n                }\n              }}\n            >\n              Buscar Palavras\n            </Button>\n          </Grid>\n        </Grid>\n      </Content>\n    </>\n  );\n}\n\nexport default App;\n","import { Grid } from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Container = styled(Grid)`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  min-height: 100vh;\r\n  margin-top: 50px;\r\n`;\r\n\r\nexport const Content = styled(Grid)``;\r\n\r\nexport const Charts = styled(Grid)``;\r\n\r\nexport const Response = styled.div`\r\n  background-color: #4caf50;\r\n  border-radius: 10px;\r\n  color: white;\r\n  margin: 10px;\r\n  padding: 10px;\r\n`;\r\n","export default function createRegex(text, keepSimilarWords) {\r\n  try {\r\n    if (keepSimilarWords) {\r\n      return new RegExp(\r\n        `${text\r\n          .toLowerCase()\r\n          .trim()\r\n          .normalize(\"NFD\")\r\n          .replace(/[\\u0300-\\u036f]/g, \"\")\r\n          .replace(/,./g, \"\")}`,\r\n        \"i\"\r\n      );\r\n    }\r\n    return new RegExp(\r\n      `^[.,;!?]{0,}${text\r\n        .toLowerCase()\r\n        .trim()\r\n        .normalize(\"NFD\")\r\n        .replace(/[\\u0300-\\u036f]/g, \"\")\r\n        .replace(/,./g, \"\")}[.,;!?]{0,}$`,\r\n      \"i\"\r\n    );\r\n  } catch (e) {}\r\n}\r\n","import { Container, Content, Response, Charts } from \"./style\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport createRegex from \"../../utils/createRegex\";\r\nimport { Doughnut, HorizontalBar } from \"react-chartjs-2\";\r\nimport { AppBar, Tab, Tabs } from \"@material-ui/core\";\r\nimport randomcolor from \"randomcolor\";\r\n\r\nfunction Result(props) {\r\n  const history = useHistory();\r\n  const { state } = props.location;\r\n  useEffect(() => {\r\n    if (!state) {\r\n      history.push(\"/\");\r\n    } else {\r\n      const { text = \"\", words = \"\" } = state;\r\n      if (text.trim() !== \"\" && words.trim() !== \"\") {\r\n        initMatchCalc();\r\n      } else {\r\n        alert(\"Digite o texto e o que deseja pesquisar nele!\");\r\n        setTimeout(() => {\r\n          history.push(\"/\");\r\n        }, 1000);\r\n      }\r\n    }\r\n  }, [history]);\r\n  const { text, words, similarWords } = state;\r\n  const [responses, setResponses] = useState([]);\r\n  const [typeResponse, setTypeResponse] = useState(0);\r\n  const [maxMatches, setMaxMatches] = useState(0);\r\n\r\n  function initMatchCalc() {\r\n    let textWords = text.split(\" \");\r\n    let searchWords = words.split(\"\\n\");\r\n    searchWords.forEach((searchWord) => {\r\n      let response = \"\";\r\n      let searchWordLength = searchWord\r\n        .split(\" \")\r\n        .filter((word) => word.trim() !== \"\").length;\r\n      if (searchWordLength === 1 && searchWord.trim() !== \"\") {\r\n        response = handleMatchWord(searchWord, textWords);\r\n        setResponses((previousResponse) => [...previousResponse, response]);\r\n      } else if (searchWordLength > 1 && searchWord.trim() !== \"\") {\r\n        response = handleMatchPhrase(searchWord, textWords);\r\n        setResponses((previousResponse) => [...previousResponse, response]);\r\n      }\r\n      setMaxMatches((previousMatches) =>\r\n        response.matches > previousMatches ? response.matches : previousMatches\r\n      );\r\n    });\r\n  }\r\n\r\n  function handleMatchWord(word, textWords) {\r\n    let matchesFind = 0;\r\n    let regex = createRegex(word, similarWords);\r\n    textWords.forEach((textWord) => {\r\n      let match = textWord\r\n        .toLowerCase()\r\n        .trim()\r\n        .normalize(\"NFD\")\r\n        .replace(/[\\u0300-\\u036f]/g, \"\")\r\n        .replace(/,./g, \"\")\r\n        .match(regex);\r\n      if (match) matchesFind += 1;\r\n    });\r\n    return {\r\n      matches: matchesFind,\r\n      type: \"word\",\r\n      label: word,\r\n    };\r\n  }\r\n\r\n  function handleMatchPhrase(phrase, textWords) {\r\n    let matchesFind = 0;\r\n    const searchPhraseSplitted = phrase\r\n      .split(\" \")\r\n      .filter((word) => word.trim() !== \"\");\r\n    let phraseLength = searchPhraseSplitted.length;\r\n    //make regex for each phrase word\r\n    searchPhraseSplitted.forEach((phraseWord, phraseIndex) => {\r\n      let regex = createRegex(phraseWord, false);\r\n      textWords.forEach((textWord, textWordIndex) => {\r\n        let match = textWord\r\n          .toLowerCase()\r\n          .trim()\r\n          .normalize(\"NFD\")\r\n          .replace(/[\\u0300-\\u036f]/g, \"\")\r\n          .replace(/,./g, \"\")\r\n          .match(regex);\r\n        if (match) {\r\n          let currentMatch = 0;\r\n          let keepMatching = true;\r\n          while (keepMatching && currentMatch <= phraseLength) {\r\n            currentMatch += 1;\r\n            let newRegex = createRegex(\r\n              searchPhraseSplitted[currentMatch],\r\n              similarWords\r\n            );\r\n            let newMatch =\r\n              textWords[textWordIndex + currentMatch] &&\r\n              textWords[textWordIndex + currentMatch]\r\n                .toLowerCase()\r\n                .trim()\r\n                .normalize(\"NFD\")\r\n                .replace(/[\\u0300-\\u036f]/g, \"\")\r\n                .replace(/,./g, \"\")\r\n                .match(newRegex);\r\n            if (newMatch && currentMatch === phraseLength) matchesFind += 1;\r\n            if (!newMatch) keepMatching = false;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    return {\r\n      matches: matchesFind,\r\n      type: \"phrase\",\r\n      label: phrase,\r\n    };\r\n  }\r\n\r\n  function a11yProps(index) {\r\n    return {\r\n      id: `scrollable-auto-tab-${index}`,\r\n      \"aria-controls\": `scrollable-auto-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\n  function TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`scrollable-auto-tabpanel-${index}`}\r\n        aria-labelledby={`scrollable-auto-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && <>{children}</>}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container container>\r\n      <AppBar>\r\n        <Tabs\r\n          value={typeResponse}\r\n          onChange={(event, newValue) => setTypeResponse(newValue)}\r\n        >\r\n          <Tab label=\"Escrita\" {...a11yProps(0)} />\r\n          <Tab label=\"Gráficos\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={typeResponse} index={0}>\r\n        {responses.map((response, index) => (\r\n          <Response key={index}>\r\n            {response.type === \"phrase\" ? \"frase \" : \"palavra \"}\r\n            {response.label} teve {response.matches}\r\n            {response.matches.length > 1 ? \" recorrências\" : \" recorrência\"}`\r\n          </Response>\r\n        ))}\r\n      </TabPanel>\r\n      <TabPanel value={typeResponse} index={1} style={{ marginTop: 50 }}>\r\n        <HorizontalBar\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: responses.map((response) => response.matches),\r\n                backgroundColor: responses.map(() => randomcolor()),\r\n              },\r\n            ],\r\n            labels: responses.map((response) => response.label),\r\n          }}\r\n          width={window.innerWidth * 0.6}\r\n          height={window.innerHeight / 2}\r\n          options={{\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n              xAxes: [\r\n                {\r\n                  ticks: {\r\n                    stepSize: Math.ceil(maxMatches / 2),\r\n                    max: maxMatches,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          }}\r\n        />\r\n        <Doughnut\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: responses.map((response) => response.matches),\r\n                backgroundColor: responses.map(() => randomcolor()),\r\n              },\r\n            ],\r\n            labels: responses.map((response) => response.label),\r\n          }}\r\n          width={window.innerWidth / 2}\r\n          height={window.innerHeight / 2}\r\n          options={{\r\n            responsive: true,\r\n            legend: {\r\n              display: false,\r\n            },\r\n          }}\r\n        />\r\n      </TabPanel>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport App from \"./pages/App\";\r\nimport Result from \"./pages/Result\";\r\nexport default function Routes() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/Buscador-De-Palavras-2.0/\" component={App} />\r\n        <Route component={Result} path=\"/Buscador-De-Palavras-2.0/result\" />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Routes from \"./router\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}